{
  "ver": "1.0.25",
  "uuid": "0da76b3c-5ab1-4c68-b568-6003a2ab6e35",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main() {\n    vec4 pos = vec4(a_position, 1);\n    pos = cc_matViewProj * pos;\n    v_uv0 = a_uv0;\n    v_color = a_color;\n    gl_Position = pos;\n}",
        "frag": "\n    precision highp float;\nuniform vec4 cc_time;\n    varying vec4 v_color;\n    varying vec2 v_uv0;\n    uniform sampler2D texture;\n    uniform sampler2D tex2;\n    uniform float u_width;\nuniform float u_shift;\n    float random (in vec2 st) {\n        return fract(sin(dot(st.xy,\n                            vec2(12.9898,78.233)))\n                    * 43758.5453123);\n    }\n    float noise (in vec2 st) {\n        vec2 i = floor(st);\n        vec2 f = fract(st);\n        float a = random(i);\n        float b = random(i + vec2(1.0, 0.0));\n        float c = random(i + vec2(0.0, 1.0));\n        float d = random(i + vec2(1.0, 1.0));\n        vec2 u = f*f*(3.0-2.0*f);\n        return mix(a, b, u.x) +\n                (c - a)* u.y * (1.0 - u.x) +\n                (d - b) * u.x * u.y;\n    }\n    void main()\n    {\n        float blur = 4. / 720.;\n        vec4 col = texture2D(tex2, v_uv0);\n#if SHOW_SDF\n        float threshold = 0.98;\n        col.a = smoothstep(threshold-blur, threshold, col.a);\n#elif SQUIGGLE\n        vec2 uv = v_uv0.xy;\n        float seed = mod(floor(cc_time.x * 3.), 5.);\n        float D = (col.a - 1.0) * 360.;\n        float grid = 20.;\n        float shift = u_shift;\n        shift *= noise(grid * uv + seed);\n        float width = u_width;\n        float mask = smoothstep(width+1., width, abs(D) - shift);\n        col = vec4(mask);\n#elif BLOOM\n        col = smoothstep(0.92, 0.98, col);\n#endif\n        gl_FragColor = vec4(col);\n    }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main() {\n    vec4 pos = vec4(a_position, 1);\n    pos = cc_matViewProj * pos;\n    v_uv0 = a_uv0;\n    v_color = a_color;\n    gl_Position = pos;\n}",
        "frag": "\n    precision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n    in vec4 v_color;\n    in vec2 v_uv0;\n    uniform sampler2D texture;\n    uniform sampler2D tex2;\n    uniform UARGS {\n        float u_width;\n        float u_shift;\n    };\n    float random (in vec2 st) {\n        return fract(sin(dot(st.xy,\n                            vec2(12.9898,78.233)))\n                    * 43758.5453123);\n    }\n    float noise (in vec2 st) {\n        vec2 i = floor(st);\n        vec2 f = fract(st);\n        float a = random(i);\n        float b = random(i + vec2(1.0, 0.0));\n        float c = random(i + vec2(0.0, 1.0));\n        float d = random(i + vec2(1.0, 1.0));\n        vec2 u = f*f*(3.0-2.0*f);\n        return mix(a, b, u.x) +\n                (c - a)* u.y * (1.0 - u.x) +\n                (d - b) * u.x * u.y;\n    }\n    void main()\n    {\n        float blur = 4. / 720.;\n        vec4 col = texture2D(tex2, v_uv0);\n#if SHOW_SDF\n        float threshold = 0.98;\n        col.a = smoothstep(threshold-blur, threshold, col.a);\n#elif SQUIGGLE\n        vec2 uv = v_uv0.xy;\n        float seed = mod(floor(cc_time.x * 3.), 5.);\n        float D = (col.a - 1.0) * 360.;\n        float grid = 20.;\n        float shift = u_shift;\n        shift *= noise(grid * uv + seed);\n        float width = u_width;\n        float mask = smoothstep(width+1., width, abs(D) - shift);\n        col = vec4(mask);\n#elif BLOOM\n        col = smoothstep(0.92, 0.98, col);\n#endif\n        gl_FragColor = vec4(col);\n    }"
      }
    }
  ],
  "subMetas": {}
}